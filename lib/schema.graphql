type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
  students: [Student]
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  "Return Array List Of Courses"
  getCourses: [Course]
  "Return One Course"
  getCourse(id: ID!): Course
  "Return Array List Of Persons"
  getPersons: [Person]
  "Return One Person"
  getPerson(id: ID!): Person
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
  level: Level
}

input PersonInput {
  name: String!
  email: String!
  avatar: String
  phone: String
}

input PersonEditInput {
  name: String
  email: String
  avatar: String
  phone: String
}

type Mutation {
  "Create Course"
  createCourse(input: CourseInput!): Course
  "Edit Course"
  editCourse(id: ID!, input: CourseEditInput!): Course
  "Create Person"
  createPerson(input: PersonInput!): Person
  "Edit Person"
  editPerson(id: ID!, input: PersonEditInput!): Person
  "Add Student in One Course"
  addStudentCourse(idCourse: ID!, idStudent: ID!): Course
}

# Validates the types of level
enum Level {
  principiante
  intermedio
  avanzado
}
